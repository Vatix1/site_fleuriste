{"ast":null,"code":"/*\nimport axios from 'axios'\n\nconst axiosAgent = axios.create({\n    baseURL: 'http://localhost:3000/'\n});\n\nfunction handleError(serviceName, err) {\n    if (err.response) {\n        console.log(\"ERROR while calling SERVICE \" + serviceName + \": \" + JSON.stringify(err.response));\n        return {\n            data: {\n                error: 1,\n                data: err.response.data\n            }\n        };\n    }\n    else if (err.request) {\n        console.log(\"NETWORK ERROR while calling SERVICE \"+serviceName+ \": \" + JSON.stringify(err.request));\n        return {\n            data: {\n                error: 1,\n                data: 'Le serveur est injoignable ou l\\'URL demandée n\\'existe pas'\n            }\n        };\n    }\n    else {\n        console.log(\"UNKNOWN ERROR while calling SERVICE \"+serviceName);\n        return {\n            data: {\n                error: 1,\n                data: 'Erreur inconnue'\n            }\n        };\n    }\n}\nasync function getRequest(uri, name) {\n    let response = null\n    try {\n        response = await axiosAgent.get(uri)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response;\n}\n\n\nasync function postRequest(uri, data, name) {\n    let response = null\n    try {\n        console.log('axios', uri + data);\n        response = await axiosAgent.post(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\n\nasync function patchRequest(uri, data, name) {\n    let response = null\n    try {\n        console.log('axios 2 ', uri+ data);\n        response = await axiosAgent.patch(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nasync function deleteRequest(uri, data, name) {\n    let response = null\n    try {\n        response = await axiosAgent.delete(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nexport {\n    getRequest,\n    deleteRequest,\n    patchRequest,\n    postRequest\n}\n*/\n\n// axios.service.js\nimport axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://apidemo.iut-bm.univ-fcomte.fr/herocorp'\n});\ninstance.interceptors.response.use(response => response, error => {\n  const {\n    response\n  } = error;\n  if (response) {\n    // La requête a été faite, mais le serveur a répondu avec un code d'erreur\n    console.error('Axios Error:', response.status, response.data);\n  } else if (error.request) {\n    // La requête a été faite, mais aucune réponse n'a été reçue\n    console.error('Axios Error: No response received');\n  } else {\n    // La requête n'a même pas pu être faite (ex: problème de connexion)\n    console.error('Axios Error: Request failed before sending');\n  }\n  return Promise.reject(error);\n});\n\n// Méthodes générales pour les requêtes GET, POST, PUT, PATCH\nexport const get = (url, config) => instance.get(url, config);\nexport const post = (url, data, config) => instance.post(url, data, config);\nexport const put = (url, data, config) => instance.put(url, data, config);\nexport const patch = (url, data, config) => instance.patch(url, data, config);\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","interceptors","response","use","error","console","status","data","request","Promise","reject","get","url","config","post","put","patch"],"sources":["/home/alexandrelesur/Documents/GitHub/site_fleuriste/Front/src/services/axios.services.js"],"sourcesContent":["/*\nimport axios from 'axios'\n\nconst axiosAgent = axios.create({\n    baseURL: 'http://localhost:3000/'\n});\n\nfunction handleError(serviceName, err) {\n    if (err.response) {\n        console.log(\"ERROR while calling SERVICE \" + serviceName + \": \" + JSON.stringify(err.response));\n        return {\n            data: {\n                error: 1,\n                data: err.response.data\n            }\n        };\n    }\n    else if (err.request) {\n        console.log(\"NETWORK ERROR while calling SERVICE \"+serviceName+ \": \" + JSON.stringify(err.request));\n        return {\n            data: {\n                error: 1,\n                data: 'Le serveur est injoignable ou l\\'URL demandée n\\'existe pas'\n            }\n        };\n    }\n    else {\n        console.log(\"UNKNOWN ERROR while calling SERVICE \"+serviceName);\n        return {\n            data: {\n                error: 1,\n                data: 'Erreur inconnue'\n            }\n        };\n    }\n}\nasync function getRequest(uri, name) {\n    let response = null\n    try {\n        response = await axiosAgent.get(uri)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response;\n}\n\n\nasync function postRequest(uri, data, name) {\n    let response = null\n    try {\n        console.log('axios', uri + data);\n        response = await axiosAgent.post(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\n\nasync function patchRequest(uri, data, name) {\n    let response = null\n    try {\n        console.log('axios 2 ', uri+ data);\n        response = await axiosAgent.patch(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nasync function deleteRequest(uri, data, name) {\n    let response = null\n    try {\n        response = await axiosAgent.delete(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nexport {\n    getRequest,\n    deleteRequest,\n    patchRequest,\n    postRequest\n}\n*/\n\n// axios.service.js\nimport axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://apidemo.iut-bm.univ-fcomte.fr/herocorp',\n});\n\ninstance.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        const { response } = error;\n\n        if (response) {\n            // La requête a été faite, mais le serveur a répondu avec un code d'erreur\n            console.error('Axios Error:', response.status, response.data);\n        } else if (error.request) {\n            // La requête a été faite, mais aucune réponse n'a été reçue\n            console.error('Axios Error: No response received');\n        } else {\n            // La requête n'a même pas pu être faite (ex: problème de connexion)\n            console.error('Axios Error: Request failed before sending');\n        }\n\n        return Promise.reject(error);\n    }\n);\n\n// Méthodes générales pour les requêtes GET, POST, PUT, PATCH\nexport const get = (url, config) => instance.get(url, config);\nexport const post = (url, data, config) => instance.post(url, data, config);\nexport const put = (url, data, config) => instance.put(url, data, config);\nexport const patch = (url, data, config) => instance.patch(url, data, config);\n\nexport default instance;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1BC,OAAO,EAAE;AACb,CAAC,CAAC;AAEFF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACP,MAAM;IAAEF;EAAS,CAAC,GAAGE,KAAK;EAE1B,IAAIF,QAAQ,EAAE;IACV;IACAG,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEF,QAAQ,CAACI,MAAM,EAAEJ,QAAQ,CAACK,IAAI,CAAC;EACjE,CAAC,MAAM,IAAIH,KAAK,CAACI,OAAO,EAAE;IACtB;IACAH,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAC;EACtD,CAAC,MAAM;IACH;IACAC,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOK,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMO,GAAG,GAAGA,CAACC,GAAG,EAAEC,MAAM,KAAKf,QAAQ,CAACa,GAAG,CAACC,GAAG,EAAEC,MAAM,CAAC;AAC7D,OAAO,MAAMC,IAAI,GAAGA,CAACF,GAAG,EAAEL,IAAI,EAAEM,MAAM,KAAKf,QAAQ,CAACgB,IAAI,CAACF,GAAG,EAAEL,IAAI,EAAEM,MAAM,CAAC;AAC3E,OAAO,MAAME,GAAG,GAAGA,CAACH,GAAG,EAAEL,IAAI,EAAEM,MAAM,KAAKf,QAAQ,CAACiB,GAAG,CAACH,GAAG,EAAEL,IAAI,EAAEM,MAAM,CAAC;AACzE,OAAO,MAAMG,KAAK,GAAGA,CAACJ,GAAG,EAAEL,IAAI,EAAEM,MAAM,KAAKf,QAAQ,CAACkB,KAAK,CAACJ,GAAG,EAAEL,IAAI,EAAEM,MAAM,CAAC;AAE7E,eAAef,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}