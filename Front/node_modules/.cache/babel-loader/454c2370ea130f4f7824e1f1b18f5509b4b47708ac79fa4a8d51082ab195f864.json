{"ast":null,"code":"import axios from 'axios';\nconst axiosAgent = axios.create({\n  baseURL: 'http://localhost:3000/'\n});\nfunction handleError(serviceName, err) {\n  if (err.response) {\n    console.log(\"ERROR while calling SERVICE \" + serviceName + \": \" + JSON.stringify(err.response));\n    return {\n      data: {\n        error: 1,\n        data: err.response.data\n      }\n    };\n  } else if (err.request) {\n    console.log(\"NETWORK ERROR while calling SERVICE \" + serviceName + \": \" + JSON.stringify(err.request));\n    return {\n      data: {\n        error: 1,\n        data: 'Le serveur est injoignable ou l\\'URL demandée n\\'existe pas'\n      }\n    };\n  } else {\n    console.log(\"UNKNOWN ERROR while calling SERVICE \" + serviceName);\n    return {\n      data: {\n        error: 1,\n        data: 'Erreur inconnue'\n      }\n    };\n  }\n}\nasync function getRequest(uri, name) {\n  let response = null;\n  try {\n    response = await axiosAgent.get(uri);\n  } catch (err) {\n    response = handleError(name, err);\n  }\n  return response;\n}\nasync function postRequest(uri, data, name) {\n  let response = null;\n  try {\n    response = await axiosAgent.post(uri, data);\n  } catch (err) {\n    response = handleError(name, err);\n  }\n  return response.data;\n}\nasync function patchRequest(uri, data, name) {\n  let response = null;\n  try {\n    response = await axiosAgent.patch(uri, data);\n  } catch (err) {\n    response = handleError(name, err);\n  }\n  return response.data;\n}\nasync function deleteRequest(uri, data, name) {\n  let response = null;\n  try {\n    response = await axiosAgent.delete(uri, data);\n  } catch (err) {\n    response = handleError(name, err);\n  }\n  return response.data;\n}\nexport { getRequest, postRequest, deleteRequest, patchRequest };","map":{"version":3,"names":["axios","axiosAgent","create","baseURL","handleError","serviceName","err","response","console","log","JSON","stringify","data","error","request","getRequest","uri","name","get","postRequest","post","patchRequest","patch","deleteRequest","delete"],"sources":["/home/alexandrelesur/Documents/GitHub/site_fleuriste/Front/src/services/axios.services.js"],"sourcesContent":["import axios from 'axios'\n\nconst axiosAgent = axios.create({\n    baseURL: 'http://localhost:3000/'\n});\n\nfunction handleError(serviceName, err) {\n    if (err.response) {\n        console.log(\"ERROR while calling SERVICE \" + serviceName + \": \" + JSON.stringify(err.response));\n        return {\n            data: {\n                error: 1,\n                data: err.response.data\n            }\n        };\n    }\n    else if (err.request) {\n        console.log(\"NETWORK ERROR while calling SERVICE \"+serviceName+ \": \" + JSON.stringify(err.request));\n        return {\n            data: {\n                error: 1,\n                data: 'Le serveur est injoignable ou l\\'URL demandée n\\'existe pas'\n            }\n        };\n    }\n    else {\n        console.log(\"UNKNOWN ERROR while calling SERVICE \"+serviceName);\n        return {\n            data: {\n                error: 1,\n                data: 'Erreur inconnue'\n            }\n        };\n    }\n}\nasync function getRequest(uri, name) {\n    let response = null\n    try {\n        response = await axiosAgent.get(uri)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response;\n}\n\n\nasync function postRequest(uri, data, name) {\n    let response = null\n    try {\n        response = await axiosAgent.post(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\n\nasync function patchRequest(uri, data, name) {\n    let response = null\n    try {\n        response = await axiosAgent.patch(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nasync function deleteRequest(uri, data, name) {\n    let response = null\n    try {\n        response = await axiosAgent.delete(uri, data)\n    } catch (err) {\n        response = handleError(name, err);\n    }\n    return response.data;\n}\n\nexport {\n    getRequest,\n    postRequest,\n    deleteRequest,\n    patchRequest\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,SAASC,WAAWA,CAACC,WAAW,EAAEC,GAAG,EAAE;EACnC,IAAIA,GAAG,CAACC,QAAQ,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,8BAA8B,GAAGJ,WAAW,GAAG,IAAI,GAAGK,IAAI,CAACC,SAAS,CAACL,GAAG,CAACC,QAAQ,CAAC,CAAC;IAC/F,OAAO;MACHK,IAAI,EAAE;QACFC,KAAK,EAAE,CAAC;QACRD,IAAI,EAAEN,GAAG,CAACC,QAAQ,CAACK;MACvB;IACJ,CAAC;EACL,CAAC,MACI,IAAIN,GAAG,CAACQ,OAAO,EAAE;IAClBN,OAAO,CAACC,GAAG,CAAC,sCAAsC,GAACJ,WAAW,GAAE,IAAI,GAAGK,IAAI,CAACC,SAAS,CAACL,GAAG,CAACQ,OAAO,CAAC,CAAC;IACnG,OAAO;MACHF,IAAI,EAAE;QACFC,KAAK,EAAE,CAAC;QACRD,IAAI,EAAE;MACV;IACJ,CAAC;EACL,CAAC,MACI;IACDJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,GAACJ,WAAW,CAAC;IAC/D,OAAO;MACHO,IAAI,EAAE;QACFC,KAAK,EAAE,CAAC;QACRD,IAAI,EAAE;MACV;IACJ,CAAC;EACL;AACJ;AACA,eAAeG,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACjC,IAAIV,QAAQ,GAAG,IAAI;EACnB,IAAI;IACAA,QAAQ,GAAG,MAAMN,UAAU,CAACiB,GAAG,CAACF,GAAG,CAAC;EACxC,CAAC,CAAC,OAAOV,GAAG,EAAE;IACVC,QAAQ,GAAGH,WAAW,CAACa,IAAI,EAAEX,GAAG,CAAC;EACrC;EACA,OAAOC,QAAQ;AACnB;AAGA,eAAeY,WAAWA,CAACH,GAAG,EAAEJ,IAAI,EAAEK,IAAI,EAAE;EACxC,IAAIV,QAAQ,GAAG,IAAI;EACnB,IAAI;IACAA,QAAQ,GAAG,MAAMN,UAAU,CAACmB,IAAI,CAACJ,GAAG,EAAEJ,IAAI,CAAC;EAC/C,CAAC,CAAC,OAAON,GAAG,EAAE;IACVC,QAAQ,GAAGH,WAAW,CAACa,IAAI,EAAEX,GAAG,CAAC;EACrC;EACA,OAAOC,QAAQ,CAACK,IAAI;AACxB;AAGA,eAAeS,YAAYA,CAACL,GAAG,EAAEJ,IAAI,EAAEK,IAAI,EAAE;EACzC,IAAIV,QAAQ,GAAG,IAAI;EACnB,IAAI;IACAA,QAAQ,GAAG,MAAMN,UAAU,CAACqB,KAAK,CAACN,GAAG,EAAEJ,IAAI,CAAC;EAChD,CAAC,CAAC,OAAON,GAAG,EAAE;IACVC,QAAQ,GAAGH,WAAW,CAACa,IAAI,EAAEX,GAAG,CAAC;EACrC;EACA,OAAOC,QAAQ,CAACK,IAAI;AACxB;AAEA,eAAeW,aAAaA,CAACP,GAAG,EAAEJ,IAAI,EAAEK,IAAI,EAAE;EAC1C,IAAIV,QAAQ,GAAG,IAAI;EACnB,IAAI;IACAA,QAAQ,GAAG,MAAMN,UAAU,CAACuB,MAAM,CAACR,GAAG,EAAEJ,IAAI,CAAC;EACjD,CAAC,CAAC,OAAON,GAAG,EAAE;IACVC,QAAQ,GAAGH,WAAW,CAACa,IAAI,EAAEX,GAAG,CAAC;EACrC;EACA,OAAOC,QAAQ,CAACK,IAAI;AACxB;AAEA,SACIG,UAAU,EACVI,WAAW,EACXI,aAAa,EACbF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}