{"ast":null,"code":"import AuthServices from \"@/services/auth.services\";\nimport { response } from \"express\";\nimport { register } from \"module\";\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthServices.login(user).then(user => {\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, error => {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n    logout({\n      commit\n    }, user) {\n      AuthServices.logout();\n      commit('logout');\n    },\n    register({\n      commit\n    }, user) {\n      return AuthServices.register(user).then(response => {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};","map":{"version":3,"names":["AuthServices","response","register","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"sources":["/home/alexandrelesur/Documents/GitHub/site_fleuriste/Front/src/store/auth.module.js"],"sourcesContent":["import AuthServices from \"@/services/auth.services\";\nimport { response } from \"express\";\nimport { register } from \"module\";\n\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user\n    ? { status: { loggedIn: true}, user}\n    : { status: { loggedIn: false}, user: null };\n\nexport const auth = {\n    namespaced: true,\n    state: initialState,\n    actions: {\n        login({ commit }, user) {\n            return AuthServices.login(user).then(\n                user => {\n                    commit('loginSuccess', user);\n                    return Promise.resolve(user);\n                },\n                error => {\n                    commit('loginFailure');\n                    return Promise.reject(error);\n                }\n            );\n        },\n        logout({ commit }, user) {\n            AuthServices.logout();\n            commit('logout');\n        },\n        register({ commit }, user) {\n            return AuthServices.register(user).then(\n                response => {\n                    commit('registerSuccess');\n                    return Promise.resolve(response.data);\n                },\n                error => {\n                    commit('registerFailure');\n                    return Promise.reject(error);\n                }\n            );\n        }\n    },\n\n    mutations: {\n        loginSuccess(state,user) {\n            state.status.loggedIn = true;\n            state.user = user;\n        },\n\n        loginFailure(state) {\n            state.status.loggedIn = false;\n            state.user = null;\n        },\n\n        logout(state) {\n            state.status.loggedIn = false;\n            state.user = null;\n        },\n\n        registerSuccess(state) {\n            state.status.loggedIn = false;\n        },\n\n        registerFailure(state) {\n            state.status.loggedIn = false;\n        }\n    }\n};"],"mappings":"AAAA,OAAOA,YAAY,MAAM,0BAA0B;AACnD,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,QAAQ,QAAQ,QAAQ;AAEjC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD,MAAMC,YAAY,GAAGL,IAAI,GACnB;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAI,CAAC;EAAEP;AAAI,CAAC,GAClC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AAEhD,OAAO,MAAMQ,IAAI,GAAG;EAChBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAEL,YAAY;EACnBM,OAAO,EAAE;IACLC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEb,IAAI,EAAE;MACpB,OAAOH,YAAY,CAACe,KAAK,CAACZ,IAAI,CAAC,CAACc,IAAI,CAChCd,IAAI,IAAI;QACJa,MAAM,CAAC,cAAc,EAAEb,IAAI,CAAC;QAC5B,OAAOe,OAAO,CAACC,OAAO,CAAChB,IAAI,CAAC;MAChC,CAAC,EACDiB,KAAK,IAAI;QACLJ,MAAM,CAAC,cAAc,CAAC;QACtB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAChC,CACJ,CAAC;IACL,CAAC;IACDE,MAAMA,CAAC;MAAEN;IAAO,CAAC,EAAEb,IAAI,EAAE;MACrBH,YAAY,CAACsB,MAAM,CAAC,CAAC;MACrBN,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IACDd,QAAQA,CAAC;MAAEc;IAAO,CAAC,EAAEb,IAAI,EAAE;MACvB,OAAOH,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,CAACc,IAAI,CACnChB,QAAQ,IAAI;QACRe,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACC,OAAO,CAAClB,QAAQ,CAACsB,IAAI,CAAC;MACzC,CAAC,EACDH,KAAK,IAAI;QACLJ,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAChC,CACJ,CAAC;IACL;EACJ,CAAC;EAEDI,SAAS,EAAE;IACPC,YAAYA,CAACZ,KAAK,EAACV,IAAI,EAAE;MACrBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACrB,CAAC;IAEDuB,YAAYA,CAACb,KAAK,EAAE;MAChBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IAEDmB,MAAMA,CAACT,KAAK,EAAE;MACVA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IAEDwB,eAAeA,CAACd,KAAK,EAAE;MACnBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC,CAAC;IAEDkB,eAAeA,CAACf,KAAK,EAAE;MACnBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}